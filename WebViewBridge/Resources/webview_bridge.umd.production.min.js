!function(e){"function"==typeof define&&define.amd?define(e):e()}((function(){"use strict";var e=function(e){var n=this;this.send=function(e){var i=window,t={};t[n.namespace]=e;try{var s=JSON.stringify(t);try{return void i.webviewbridge.postMessage(s)}catch(e){}try{return void i.webkit.messageHandlers.webviewbridge.postMessage(s)}catch(e){}n.messages.push(t),n.openUrl("https://webviewbridge?action=query&namespace="+encodeURIComponent(n.namespace))}catch(e){console.error("[Bridge][Native] send fail: "+e)}},this.query=function(){var e=JSON.stringify(n.messages);return n.messages.splice(0,n.messages.length),e},this.openUrl=function(e){var n=document.createElement("iframe");n.style.display="none",n.src=e,document.documentElement.appendChild(n),setTimeout((function(){document.documentElement.removeChild(n)}),1)},this.messages=[],this.namespace=e},n=function(){function e(e,n,i){this.id=e,this.info=n,this.wind=i}var n=e.prototype;return n.obj=function(){var e={};return e.id=this.id,e.info=this.info,e.href=this.wind.location.href,e},n.equalTo=function(e){return this.id==e.id&&this.wind==e.wind},n.send=function(e){this.wind.postMessage(JSON.stringify(e),"*")},e}(),i=function(){function i(i){var t=this;this.receive=function(e){try{var i=e.source,s=JSON.parse(e.data)[t.namespace],o=s.typ,r=s.from,d=s.body;if(void 0!==s.to||void 0===r)return;if("transmit"===o){var a=t.nods.get(r);if(null==a)return;if(i!=(null==a?void 0:a.wind))throw'[Bridge][Transmit] window does not match for nod {"id":"'+r+'"}';return void t.native.send(s)}if("connect"===o){var c=d.info,u=t.nods.get(r),f=new n(r,c,i);if(null!=u)throw"[Bridge][Connect] duplicated, old nod "+JSON.stringify(u.obj)+", new nod "+JSON.stringify(f.obj);return t.nods.set(r,f),void t.native.send(s)}if("disconnect"===o){var h=d.info,v=t.nods.get(r),l=new n(r,h,i);if(null==v)return;if(!v.equalTo(l))throw"[Bridge][Disconnect] unmatched, old nod "+JSON.stringify(v.obj)+", new nod "+JSON.stringify(l.obj);return t.nods.delete(r),void t.native.send(s)}}catch(e){}},this.namespace=i,this.native=new e(i),this.nods=new Map,this.load()}var t=i.prototype;return t.query=function(){return this.native.query()},t.send=function(e){try{var n=JSON.parse(e),i=n[this.namespace].to,t=this.nods.get(i);if(null==t)throw'[Bridge][Transmit] nod {"id":"'+i+'"} is not found';t.send(n)}catch(e){console.error(e)}},t.load=function(){addEventListener("message",this.receive),addEventListener("unload",this.unload);var e={};e[this.namespace]={typ:"load"},function e(n,i){n.postMessage(i,"*");for(var t=n.frames,s=0,o=t.length;s<o;s++)e(t[s],i)}(window,JSON.stringify(e))},t.unload=function(){var e=this;removeEventListener("message",this.receive),removeEventListener("unload",this.unload),this.nods.forEach((function(n){e.native.send({typ:"disconnect",from:n.id,body:{info:n.info}})})),this.nods.clear()},i}(),t=window,s="webviewbridge/<namespace>";null==t[s]&&(t[s]=new i("<namespace>"))}));
//# sourceMappingURL=webview_bridge.umd.production.min.js.map
