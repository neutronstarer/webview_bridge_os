!function(e){"function"==typeof define&&define.amd?define(e):e()}((function(){"use strict";var e=function(e){var n=this;this.send=function(e){var t=window,i={};i[n.namespace]=e;try{var o=JSON.stringify(i);try{return void t["com.neutronstarer.webviewbridge/"+n.namespace].postMessage(o)}catch(e){}try{return void t.webkit.messageHandlers["com.neutronstarer.webviewbridge"].postMessage(o)}catch(e){}n.messages.push(i),n.openUrl("https://webviewbridge?action=query&namespace="+encodeURIComponent(n.namespace))}catch(e){console.error("[Bridge][Native] send fail: "+e)}},this.query=function(){var e=JSON.stringify(n.messages);return n.messages.splice(0,n.messages.length),e},this.openUrl=function(e){var n=document.createElement("iframe");n.style.display="none",n.src=e,document.documentElement.appendChild(n),setTimeout((function(){document.documentElement.removeChild(n)}),1)},this.messages=[],this.namespace=e},n=function(){function e(e,n,t){this.id=e,this.info=n,this.wind=t}var n=e.prototype;return n.obj=function(){var e={};return e.id=this.id,e.info=this.info,e.href=this.wind.location.href,e},n.equalTo=function(e){return this.id==e.id&&this.wind==e.wind},n.send=function(e){this.wind.postMessage(JSON.stringify(e),"*")},e}(),t=function(){function t(t){var i=this;this.receive=function(e){try{var t=e.source,o=JSON.parse(e.data)[i.namespace],s=o.typ,r=o.from,a=o.body;if(void 0!==o.to||void 0===r)return;if("transmit"===s){var d=i.nods.get(r);if(null==d)return;if(t!=(null==d?void 0:d.wind))throw'[Bridge][Transmit] window does not match for nod {"id":"'+r+'"}';return void i.native.send(o)}if("connect"===s){var c=a.info,u=i.nods.get(r),f=new n(r,c,t);if(null!=u)throw"[Bridge][Connect] duplicated, old nod "+JSON.stringify(u.obj)+", new nod "+JSON.stringify(f.obj);return i.nods.set(r,f),void i.native.send(o)}if("disconnect"===s){var h=a.info,v=i.nods.get(r),l=new n(r,h,t);if(null==v)return;if(!v.equalTo(l))throw"[Bridge][Disconnect] unmatched, old nod "+JSON.stringify(v.obj)+", new nod "+JSON.stringify(l.obj);return i.nods.delete(r),void i.native.send(o)}}catch(e){}},this.namespace=t,this.native=new e(t),this.nods=new Map,this.load()}var i=t.prototype;return i.query=function(){return this.native.query()},i.send=function(e){try{var n=JSON.parse(e),t=n[this.namespace].to,i=this.nods.get(t);if(null==i)throw'[Bridge][Transmit] nod {"id":"'+t+'"} is not found';i.send(n)}catch(e){console.error(e)}},i.load=function(){addEventListener("message",this.receive),addEventListener("unload",this.unload);var e={};e[this.namespace]={typ:"load"},function e(n,t){n.postMessage(t,"*");for(var i=n.frames,o=0,s=i.length;o<s;o++)e(i[o],t)}(window,JSON.stringify(e))},i.unload=function(){var e=this;removeEventListener("message",this.receive),removeEventListener("unload",this.unload),this.nods.forEach((function(n){e.native.send({typ:"disconnect",from:n.id,body:{info:n.info}})})),this.nods.clear()},t}(),i=window,o="webviewbridge/<namespace>";null==i[o]&&(i[o]=new t("<namespace>"))}));
//# sourceMappingURL=webview_bridge.umd.production.min.js.map
